//noinspection SpellCheckingInspectionForFile
{
		parserClass="org.jetbrains.plugins.d2.lang.D2Parser"

		elementTypeHolderClass="org.jetbrains.plugins.d2.lang.D2ElementTypes"
		elementTypeClass="org.jetbrains.plugins.d2.lang.D2ElementType"
		elementTypeFactory="org.jetbrains.plugins.d2.lang.D2ElementTypeFactory.element"

		generatePsi=false

		tokenTypeClass="com.intellij.psi.tree.IElementType"
		tokenTypeFactory="org.jetbrains.plugins.d2.lang.D2ElementTypeFactory.token"

		psiTreeUtilClass="org.jetbrains.plugins.d2.lang.D2PsiTreeUtil"

		psiClassPrefix="D2"
		psiImplClassSuffix="Impl"
		psiPackage="org.jetbrains.plugins.d2.lang.psi"
		psiImplPackage="org.jetbrains.plugins.d2.lang.psi.impl"
}

File ::= !<<eof>> (ShapeDeclaration | ShapeIdWithPropery | ShapeDefinitions | COMMENT | SEMICOLON)*

// logs.style.strokes: "#f4a261"
private ShapeIdWithPropery ::= (ShapeId (DOT ShapeId)* DOT)? Property

// declaration means `id + label` (not implicit shape via just ID)
ShapeDeclaration ::= ShapeId (DOT ShapeId)* COLON (ShapeLabel | BlockString)? BlockDefinition?

// bad tree structure: ci.deploys->clouds<-a.sub:test
private ShapeDefinitions ::= ShapeId (ShapeConnection | SubShapeDefinition)* ShapeExtras? {
  pin=1
}

private SubShapeDefinition ::= DOT ShapeId ShapeExtras?

private ShapeExtras ::= COLON ((ShapeLabel | BlockString) BlockDefinition? | BlockDefinition) {
  pin=1
}

ShapeId ::= ID | STRING

ShapeLabel ::= UNQUOTED_STRING | STRING

left ShapeConnection ::= (Connector ShapeId)+

Connector ::= ARROW | REVERSE_ARROW | DOUBLE_ARROW | DOUBLE_HYPHEN_ARROW

BlockString ::= BLOCK_STRING_OPEN BLOCK_STRING_LANG? BLOCK_STRING_BODY BLOCK_STRING_CLOSE

UnquotedStringValue ::= UNQUOTED_STRING
StringValue ::= STRING
ColorValue ::= COLOR
OtherValue ::= AttributeValue | BlockString

// todo: handle RESERVED_KEYWORD_HOLDERS in the same way as style (do not allow arbitrary ID)
PropertyKey ::= SIMPLE_RESERVED_KEYWORDS | (RESERVED_KEYWORD_HOLDERS DOT ID) | (STYLE_KEYWORD DOT STYLE_KEYWORDS)
private PropertyValue ::= UnquotedStringValue | StringValue | ColorValue | OtherValue

Property ::= PropertyKey COLON PropertyValue

BlockDefinition ::= LBRACE (ShapeIdWithPropery | ShapeDefinitions)* RBRACE {
  pin=1
}

private AttributeValue ::= STRING | ID | INT | FLOAT | TRUE | FALSE | DOT | COLOR