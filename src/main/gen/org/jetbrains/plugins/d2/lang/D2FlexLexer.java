// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtilRt;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class D2FlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL_STATE = 2;
  public static final int PROPERTY_VALUE_STATE = 4;
  public static final int BLOCK_STRING_LANG_STATE = 6;
  public static final int BLOCK_STRING_BODY_STATE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\5\0\1\7\1\10\1\0"+
    "\3\11\1\12\6\11\1\13\1\14\1\15\1\0\1\16"+
    "\2\0\6\17\24\20\1\0\1\21\2\0\1\20\1\0"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\20\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\20\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\7\0\1\3\32\0"+
    "\1\55\u01df\0\1\55\177\0\13\55\35\0\2\3\5\0"+
    "\1\55\57\0\1\55\240\0\1\55\377\0\u0100\56";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\2\4\21\1\1\10\1\11\1\12"+
    "\1\2\1\13\2\12\1\14\1\15\1\16\3\12\1\17"+
    "\1\20\1\21\2\12\1\22\1\4\1\23\3\0\1\1"+
    "\1\3\2\0\1\1\1\24\1\25\1\26\1\27\36\1"+
    "\2\0\1\30\1\12\1\0\1\12\1\15\1\0\1\12"+
    "\1\0\1\30\2\12\1\0\4\12\1\0\1\30\2\0"+
    "\1\31\33\1\1\32\4\1\1\30\1\12\1\30\1\33"+
    "\2\12\1\30\6\1\2\26\22\1\2\12\1\34\2\1"+
    "\1\32\3\1\3\0\7\1\1\35\1\1\1\0\3\1"+
    "\1\12\1\36\17\1\1\26\4\1\1\37\1\12\1\0"+
    "\2\1\1\0\7\1\2\0\3\1\1\12\14\1\1\12"+
    "\1\1\1\40\10\1\1\0\24\1\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0205\0\u0205\0\u0263"+
    "\0\u0205\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u0205\0\u0205\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u0205\0\u069c\0\u0205\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\u0205\0\u0205\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\353"+
    "\0\u0149\0\u0872\0\u08a1\0\u08d0\0\u01a7\0\u08ff\0\u092e\0\u01d6"+
    "\0\u0205\0\353\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u05b1\0\u063e\0\u05b1\0\u0f0e\0\u066d\0\u0f3d\0\u0f6c"+
    "\0\u06cb\0\u0f9b\0\u0f9b\0\u06cb\0\u0fca\0\u0ff9\0\u0729\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u0814\0\u0205\0\u10e4\0\u1113\0\u0205"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b"+
    "\0\u15aa\0\u15d9\0\u1608\0\353\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u063e\0\u16f3\0\u0f9b\0\u1057\0\u1722\0\u1751\0\u0872\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70"+
    "\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u06cb\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9"+
    "\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\353\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021\0\u2050\0\u207f\0\u06cb\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3"+
    "\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b"+
    "\0\u06cb\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574"+
    "\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec"+
    "\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864"+
    "\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc"+
    "\0\u2a0b\0\353\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25"+
    "\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d"+
    "\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15"+
    "\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\1\11\1\12\1\13\1\14\1\6"+
    "\1\15\1\16\1\17\1\20\1\21\3\6\1\22\1\23"+
    "\1\24\1\25\1\6\1\26\1\27\1\30\1\31\1\6"+
    "\1\32\1\33\1\34\1\35\2\6\1\36\1\37\1\40"+
    "\1\41\1\42\3\6\1\43\1\21\1\44\1\7\1\6"+
    "\1\45\1\46\1\47\1\21\1\50\1\45\1\51\5\45"+
    "\1\21\35\45\1\52\1\53\1\54\1\21\1\45\1\55"+
    "\1\46\1\47\1\21\1\56\1\55\1\57\2\55\2\60"+
    "\1\61\1\62\12\55\1\63\13\55\1\64\6\55\2\21"+
    "\1\54\1\21\1\55\1\65\3\7\47\65\1\21\1\65"+
    "\1\7\1\65\53\66\1\67\3\66\1\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\33\6\4\0\1\6"+
    "\1\0\3\7\51\0\1\7\1\0\1\10\1\71\2\72"+
    "\1\6\2\10\1\71\1\72\2\10\4\72\2\10\1\73"+
    "\30\10\4\72\1\10\2\11\2\0\4\11\1\74\2\11"+
    "\4\74\33\11\4\74\1\6\1\12\1\75\2\76\2\12"+
    "\1\6\1\75\1\76\2\12\4\76\2\12\1\77\30\12"+
    "\4\76\1\12\7\0\1\100\6\0\1\101\117\0\1\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\6\6"+
    "\1\102\24\6\4\0\1\6\7\0\1\103\47\0\1\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\17\6"+
    "\1\104\13\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\20\6\1\105\12\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\15\6"+
    "\1\106\2\6\1\107\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\7\6\1\110\3\6"+
    "\1\111\4\6\1\112\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\13\6\1\113\4\6"+
    "\1\114\12\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\22\6\1\115\10\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\7\6"+
    "\1\116\10\6\1\117\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\5\6\1\120\16\6"+
    "\1\121\6\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\3\6\1\122\3\6\1\123\3\6"+
    "\1\124\17\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\25\6\1\125\5\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\7\6"+
    "\1\126\23\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\21\6\1\127\11\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\12\6"+
    "\1\130\5\6\1\131\3\6\1\132\6\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\3\6"+
    "\1\133\3\6\1\134\10\6\1\135\12\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\17\6"+
    "\1\136\13\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\3\6\1\137\3\6\1\140\23\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\13\6\1\141\17\6\4\0\1\6\1\45\1\142"+
    "\2\0\10\45\1\0\35\45\4\0\1\45\1\0\1\46"+
    "\57\0\1\47\54\0\1\50\1\143\2\72\1\144\7\50"+
    "\1\72\4\50\1\145\30\50\4\72\1\50\1\51\1\146"+
    "\2\76\2\51\1\144\5\51\1\76\4\51\1\147\30\51"+
    "\4\76\1\51\1\150\3\0\5\150\2\0\4\150\2\0"+
    "\1\150\30\0\1\150\1\53\1\150\1\0\1\150\1\55"+
    "\1\151\2\0\7\55\2\0\35\55\4\0\1\55\1\152"+
    "\1\153\2\72\1\154\1\155\5\152\2\72\4\152\1\156"+
    "\30\152\4\72\1\152\1\57\1\157\2\76\2\57\1\154"+
    "\4\57\2\76\4\57\1\160\30\57\4\76\1\57\1\55"+
    "\1\151\2\0\4\55\1\161\2\60\2\0\35\55\4\0"+
    "\2\55\1\151\2\0\7\55\2\0\5\55\1\162\27\55"+
    "\4\0\2\55\1\151\2\0\7\55\2\0\24\55\1\163"+
    "\10\55\4\0\1\55\1\65\3\0\47\65\1\0\1\65"+
    "\1\0\1\65\53\164\1\67\3\164\53\0\1\67\3\0"+
    "\4\72\1\165\14\72\1\166\35\72\1\10\1\71\2\72"+
    "\3\10\1\71\1\72\2\10\4\72\2\10\1\73\30\10"+
    "\4\72\1\10\2\74\2\0\52\74\1\0\6\76\1\165"+
    "\12\76\1\167\35\76\1\12\1\75\2\0\3\12\1\75"+
    "\1\76\2\12\4\76\33\12\4\76\1\6\7\0\1\103"+
    "\6\0\1\170\40\0\1\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\13\6\1\171\17\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\15\6"+
    "\1\15\4\6\1\172\10\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\3\6\1\173\27\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\17\6\1\174\13\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\23\6\1\175\7\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\22\6\1\176\10\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\25\6\1\177\5\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\15\6\1\200\15\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\17\6\1\201\13\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\13\6\1\202\17\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\13\6\1\203\17\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\22\6\1\204\10\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\20\6\1\205\12\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\3\6\1\206\27\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\4\6\1\207\26\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\10\6\1\210\22\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\17\6\1\211\13\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\15\6\1\212\15\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\3\6\1\213\27\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\3\6\1\214\27\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\3\6\1\215\27\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\25\6\1\216\5\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\22\6\1\217\6\6"+
    "\1\220\1\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\22\6\1\221\10\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\30\6"+
    "\1\222\2\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\20\6\1\223\1\224\11\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\6\6\1\225\24\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\22\6\1\226\10\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\22\6\1\227\10\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\6\6\1\230\24\6\4\0"+
    "\1\6\1\50\1\143\2\72\1\231\7\50\1\72\4\50"+
    "\1\145\30\50\4\72\1\50\1\51\1\146\2\0\10\51"+
    "\1\76\35\51\4\76\1\45\1\150\3\0\5\150\2\0"+
    "\4\150\2\0\1\150\30\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\152\1\153\2\72\1\154\6\152\2\72\4\152"+
    "\1\156\30\152\4\72\2\152\1\153\2\72\1\154\4\152"+
    "\2\232\2\72\2\152\1\232\1\152\1\156\6\232\22\152"+
    "\4\72\2\152\1\153\2\72\1\233\6\152\2\72\4\152"+
    "\1\156\30\152\4\72\1\152\1\57\1\157\2\0\7\57"+
    "\2\76\35\57\4\76\2\55\1\151\2\0\5\55\2\234"+
    "\2\0\35\55\4\0\2\55\1\151\2\0\7\55\2\0"+
    "\17\55\1\235\15\55\4\0\2\55\1\151\2\0\7\55"+
    "\2\0\27\55\1\236\5\55\4\0\1\55\4\72\1\237"+
    "\14\72\1\166\35\72\2\76\2\0\52\76\1\0\1\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\16\6"+
    "\1\240\14\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\6\6\1\241\24\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\23\6"+
    "\1\242\7\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\23\6\1\243\7\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\5\6"+
    "\1\224\25\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\7\6\1\244\23\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\4\6"+
    "\1\245\26\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\15\6\1\246\15\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\24\6"+
    "\1\247\6\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\6\6\1\250\24\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\11\6"+
    "\1\251\21\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\13\6\1\252\17\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\17\6"+
    "\1\224\13\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\15\6\1\253\15\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\7\6"+
    "\1\254\23\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\24\6\1\224\6\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\14\6"+
    "\1\224\16\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\24\6\1\255\6\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\22\6"+
    "\1\224\10\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\5\6\1\256\25\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\6\6"+
    "\1\257\12\6\1\260\11\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\22\6\1\261\10\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\20\6\1\262\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\15\6\1\263\15\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\11\6\1\264\21\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\24\6\1\265\6\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\15\6\1\266\15\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\7\6\1\267\23\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\23\6\1\224\7\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\24\6\1\270\6\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\24\6\1\271\6\6\4\0\1\6\1\152\1\153"+
    "\2\72\1\154\4\152\2\272\2\72\2\152\1\272\1\152"+
    "\1\156\6\272\22\152\4\72\1\152\1\55\1\151\2\0"+
    "\7\55\2\0\25\55\1\273\7\55\4\0\2\55\1\151"+
    "\2\0\7\55\2\0\11\55\1\274\23\55\4\0\1\55"+
    "\1\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\3\6\1\275\27\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\7\6\1\276\23\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\23\6\1\277\7\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\24\6\1\300\6\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\5\6\1\301\25\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\15\6\1\302\15\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\303\1\0\2\6\4\0"+
    "\7\6\1\15\23\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\304\1\0\2\6\4\0\33\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\305\1\0\2\6\4\0\33\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\12\6\1\210\20\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\32\6\1\306\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\13\6"+
    "\1\307\17\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\15\6\1\224\15\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\13\6"+
    "\1\310\17\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\13\6\1\311\17\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\20\6"+
    "\1\312\12\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\7\6\1\224\23\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\5\6"+
    "\1\313\25\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\14\6\1\314\16\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\7\6"+
    "\1\315\23\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\7\6\1\316\23\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\317\1\0\2\6\4\0\33\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\24\6\1\320\6\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\22\6\1\321\10\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\13\6\1\322\17\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\12\6\1\224\20\6"+
    "\4\0\1\6\1\152\1\153\2\72\1\154\4\152\2\323"+
    "\2\72\2\152\1\323\1\152\1\156\6\323\22\152\4\72"+
    "\1\152\1\55\1\151\2\0\7\55\2\0\11\55\1\324"+
    "\23\55\4\0\1\55\1\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\24\6\1\325\6\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\22\6"+
    "\1\326\10\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\7\6\1\226\23\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\22\6"+
    "\1\327\10\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\24\6\1\330\6\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\7\6"+
    "\1\331\23\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\21\6\1\332\11\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\5\6"+
    "\1\333\15\6\1\334\7\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\5\6\1\335\3\6"+
    "\1\336\10\6\1\337\10\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\20\6\1\340\12\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\5\6\1\102\25\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\21\6\1\341\11\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\24\6\1\342\6\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\27\6\1\102\3\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\7\6\1\343\23\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\7\6\1\344\23\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\24\6\1\343\6\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\24\6\1\345\6\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\13\6\1\346\17\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\15\6\1\347\15\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\5\6\1\350\25\6\4\0\1\6\1\152\1\153"+
    "\2\72\1\351\4\152\2\352\2\72\2\152\1\352\1\152"+
    "\1\156\6\352\22\152\4\72\1\152\1\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\7\6\1\15\23\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\353\1\0\2\6"+
    "\4\0\33\6\4\0\2\6\1\70\2\0\3\6\1\70"+
    "\1\0\2\6\4\0\3\6\1\354\27\6\4\0\2\6"+
    "\1\70\2\0\3\6\1\70\1\0\2\6\4\0\13\6"+
    "\1\355\17\6\4\0\2\6\1\70\2\0\3\6\1\356"+
    "\1\0\2\6\4\0\33\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\3\6\1\357\27\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\20\6\1\360\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\13\6\1\361\17\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\20\6\1\362\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\3\6\1\346\27\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\20\6\1\363\12\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\17\6\1\364\13\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\15\6\1\365\15\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\31\6\1\102\1\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\366\1\0\2\6"+
    "\4\0\33\6\4\0\2\6\1\70\2\0\3\6\1\367"+
    "\1\0\2\6\4\0\33\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\22\6\1\370\10\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\21\6\1\224\11\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\13\6\1\371\17\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\3\6\1\372\27\6\4\0\1\6\1\152\1\153"+
    "\2\72\1\154\4\152\2\373\2\72\2\152\1\373\1\152"+
    "\1\156\6\373\22\152\4\72\1\152\1\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\22\6\1\374\10\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\13\6\1\375\17\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\20\6\1\376\12\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\4\6\1\377\26\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\24\6\1\u0100\6\6"+
    "\4\0\2\6\1\70\2\0\3\6\1\70\1\0\2\6"+
    "\4\0\15\6\1\u0101\15\6\4\0\2\6\1\70\2\0"+
    "\3\6\1\70\1\0\2\6\4\0\32\6\1\365\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\15\6\1\u0102\15\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\27\6\1\226\3\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\24\6\1\350\6\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\7\6\1\102\23\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\3\6\1\u0103\27\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\6\6\1\u0104\20\6\1\u0105"+
    "\3\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\3\6\1\u0106\27\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\17\6\1\365"+
    "\13\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\15\6\1\u0107\15\6\4\0\1\6\1\152"+
    "\1\153\2\72\1\154\4\152\2\u0108\2\72\2\152\1\u0108"+
    "\1\152\1\156\6\u0108\22\152\4\72\1\152\1\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\3\6\1\u0109"+
    "\27\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\17\6\1\210\13\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\17\6\1\u010a"+
    "\13\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\20\6\1\u010b\12\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\24\6\1\u010c"+
    "\6\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\20\6\1\u010d\12\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\25\6\1\u010e"+
    "\5\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\22\6\1\u010f\10\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\3\6\1\u0110"+
    "\27\6\4\0\2\6\1\70\2\0\3\6\1\70\1\0"+
    "\2\6\4\0\13\6\1\u0111\17\6\4\0\2\6\1\70"+
    "\2\0\3\6\1\70\1\0\2\6\4\0\17\6\1\u0112"+
    "\13\6\4\0\2\6\1\70\2\0\3\6\1\u0113\1\0"+
    "\2\6\4\0\33\6\4\0\1\6\1\152\1\153\2\72"+
    "\1\351\6\152\2\72\4\152\1\156\30\152\4\72\1\152"+
    "\1\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\6\6\1\u0114\24\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\22\6\1\u0115\10\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\7\6\1\u0116\23\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\22\6\1\102\10\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\16\6\1\u0117\14\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\22\6\1\u0118\10\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\23\6\1\u0119\7\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\6\6\1\u011a\24\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\23\6\1\u011b\7\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\11\6\1\336\21\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\13\6\1\u011c\17\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\6\6\1\u011d\24\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\22\6\1\u011e\10\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\17\6\1\226\13\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\20\6\1\u011f\12\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\12\6\1\102\20\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\24\6\1\u0119\6\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\10\6\1\u0120\22\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\25\6\1\u0121\5\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\7\6\1\u010d\23\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\17\6\1\102\13\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\27\6\1\u0122\3\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\20\6\1\u0123\12\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\23\6\1\102\7\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\12\6\1\u0124\20\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\22\6\1\u0125\10\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\7\6\1\u0126\23\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\16\6\1\102\14\6\4\0"+
    "\2\6\1\70\2\0\3\6\1\70\1\0\2\6\4\0"+
    "\3\6\1\u0127\27\6\4\0\2\6\1\70\2\0\3\6"+
    "\1\70\1\0\2\6\4\0\6\6\1\u0128\24\6\4\0"+
    "\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12173];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\6\1\1\11\1\1\2\11\1\1\1\11\21\1"+
    "\2\11\5\1\1\11\1\1\1\11\4\1\2\11\5\1"+
    "\3\0\2\1\2\0\2\1\1\11\40\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\1\0\4\1"+
    "\1\0\1\11\2\0\1\11\112\1\3\0\11\1\1\0"+
    "\33\1\1\0\2\1\1\0\7\1\2\0\33\1\1\0"+
    "\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public D2FlexLexer() {
    this((java.io.Reader)null);
  }

  private StringBuilder blockStringToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public D2FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_STRING_LANG_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 297: break;
            case BLOCK_STRING_BODY_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 298: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ID;
            }
          // fall through
          case 34: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 35: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 36: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 37: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 38: break;
          case 6:
            { yybegin(LABEL_STATE); return COLON;
            }
          // fall through
          case 39: break;
          case 7:
            { return SEMICOLON;
            }
          // fall through
          case 40: break;
          case 8:
            { return LBRACE;
            }
          // fall through
          case 41: break;
          case 9:
            { return RBRACE;
            }
          // fall through
          case 42: break;
          case 10:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 43: break;
          case 11:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 44: break;
          case 12:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 45: break;
          case 13:
            { yybegin(BLOCK_STRING_LANG_STATE);
								blockStringToken = new StringBuilder(yytext()).reverse();
								return BLOCK_STRING_OPEN;
            }
          // fall through
          case 46: break;
          case 14:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 47: break;
          case 15:
            { return INT;
            }
          // fall through
          case 48: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 49: break;
          case 17:
            { yybegin(YYINITIAL); return SEMICOLON;
            }
          // fall through
          case 50: break;
          case 18:
            { yybegin(BLOCK_STRING_BODY_STATE); return BLOCK_STRING_LANG;
            }
          // fall through
          case 51: break;
          case 19:
            { if (blockStringToken == null) {
											yybegin(YYINITIAL);
											blockStringToken = null;
											return BLOCK_STRING_CLOSE;
									}
									else if (StringUtilRt.endsWith(yytext(), blockStringToken)) {
											// push back to register on next step as a BLOCK_STRING_CLOSE token,
											// (we neeed it to easily implement embededed language, brace matcher and so on)
											yypushback(blockStringToken.length());
											blockStringToken = null;
											return BLOCK_STRING_BODY;
									}
            }
          // fall through
          case 52: break;
          case 20:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 53: break;
          case 21:
            { return ARROW;
            }
          // fall through
          case 54: break;
          case 22:
            { yybegin(PROPERTY_VALUE_STATE); return STYLE_KEYWORDS;
            }
          // fall through
          case 55: break;
          case 23:
            { return REVERSE_ARROW;
            }
          // fall through
          case 56: break;
          case 24:
            { return STRING;
            }
          // fall through
          case 57: break;
          case 25:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 58: break;
          case 26:
            { yybegin(PROPERTY_VALUE_STATE); return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 59: break;
          case 27:
            { return FLOAT;
            }
          // fall through
          case 60: break;
          case 28:
            { return TRUE;
            }
          // fall through
          case 61: break;
          case 29:
            { return STYLE_KEYWORD;
            }
          // fall through
          case 62: break;
          case 30:
            { return FALSE;
            }
          // fall through
          case 63: break;
          case 31:
            { return COLOR;
            }
          // fall through
          case 64: break;
          case 32:
            { yybegin(PROPERTY_VALUE_STATE); return CONTAINER_LESS_KEYWORDS;
            }
          // fall through
          case 65: break;
          case 33:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
