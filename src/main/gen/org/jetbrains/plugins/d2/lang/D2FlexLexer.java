// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtilRt;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class D2FlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL = 2;
  public static final int BLOCK_STRING_LANG_STATE = 4;
  public static final int BLOCK_STRING_BODY_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\2\0\1\7\2\0\1\10"+
    "\1\11\1\0\12\12\1\13\1\14\1\15\1\0\1\16"+
    "\2\0\32\17\1\0\1\20\2\0\1\17\1\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\17\1\32\1\33\1\34\1\35\1\36\1\37\1\17"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\17\1\46"+
    "\1\47\1\50\1\51\1\52\7\0\1\53\32\0\1\54"+
    "\u01df\0\1\54\177\0\13\54\35\0\2\53\5\0\1\54"+
    "\57\0\1\54\240\0\1\54\377\0\u0100\55";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\1\14\4\1\11\1\12"+
    "\1\13\1\2\1\14\2\13\1\6\2\13\1\15\1\16"+
    "\1\17\1\20\1\2\1\1\1\21\1\0\1\22\4\0"+
    "\1\23\1\24\1\0\1\25\26\4\2\0\1\22\1\13"+
    "\1\0\4\13\1\16\1\0\1\22\1\26\1\27\22\4"+
    "\1\30\4\4\2\13\1\22\1\13\1\22\2\13\1\26"+
    "\2\13\15\4\1\31\2\4\1\22\1\13\1\31\1\30"+
    "\2\4\1\32\1\0\2\4\1\33\3\4\1\32\15\4"+
    "\1\0\7\4\1\0\7\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\270\0\u01fa\0\270\0\270\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\270\0\270\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\270\0\u05ee"+
    "\0\270\0\u061c\0\u064a\0\u0678\0\u06a6\0\u0114\0\270\0\u06d4"+
    "\0\u0170\0\u0702\0\u0730\0\u01cc\0\270\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u047e"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0678"+
    "\0\u0114\0\u075e\0\270\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u019e\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u0bae\0\u0bdc\0\u0bae\0\u1140\0\u0508\0\u0c38"+
    "\0\u116e\0\u0c94\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u019e\0\u144e\0\u147c\0\u0bdc\0\u14aa\0\u047e\0\u14d8"+
    "\0\u1506\0\u1534\0\u019e\0\u1562\0\u1590\0\u15be\0\u019e\0\u15ec"+
    "\0\u161a\0\u1648\0\u047e\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\5\1\12\1\5\2\12"+
    "\1\21\1\22\1\12\1\23\1\24\1\25\1\26\1\12"+
    "\1\27\1\12\1\30\3\12\1\31\1\32\1\12\1\33"+
    "\1\34\2\12\1\35\1\5\1\36\3\5\1\37\1\40"+
    "\1\41\1\5\1\42\1\37\1\43\3\37\1\44\13\37"+
    "\1\45\13\37\1\46\5\37\1\47\1\50\1\51\2\5"+
    "\1\37\1\52\3\53\45\52\1\5\1\52\2\53\1\52"+
    "\51\54\1\55\4\54\57\0\3\6\52\0\4\56\1\57"+
    "\13\56\1\60\35\56\2\10\2\0\47\10\1\0\1\10"+
    "\1\0\6\61\1\57\11\61\1\62\35\61\7\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\27\12\16\0"+
    "\1\64\5\0\1\65\46\0\1\12\1\63\1\66\1\15"+
    "\4\0\1\12\1\0\27\12\16\0\1\67\54\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\12\12\1\70"+
    "\2\12\1\71\11\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\4\12\1\72\3\12\1\73\16\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\1\74\26\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\17\12\1\75\7\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\4\12\1\76\10\12"+
    "\1\77\11\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\2\12\1\100\24\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\1\101\3\12\1\102"+
    "\3\12\1\103\16\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\4\12\1\104\22\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\7\12\1\105"+
    "\5\12\1\106\3\12\1\107\5\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\1\110\14\12\1\111"+
    "\1\12\1\112\7\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\1\113\3\12\1\114\22\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\10\12"+
    "\1\115\16\12\6\0\1\37\1\116\2\0\44\37\5\0"+
    "\1\37\1\0\1\40\56\0\1\41\53\0\1\42\1\117"+
    "\2\56\1\120\13\42\1\121\27\42\5\56\1\42\1\43"+
    "\1\122\2\61\2\43\1\120\11\43\1\123\27\43\5\61"+
    "\1\43\1\37\1\116\2\0\5\37\1\124\1\44\35\37"+
    "\5\0\2\37\1\116\2\0\15\37\1\125\26\37\5\0"+
    "\2\37\1\116\2\0\34\37\1\126\7\37\5\0\1\37"+
    "\1\127\3\0\6\127\1\0\4\127\1\0\1\127\27\0"+
    "\1\127\1\50\1\127\2\0\1\127\1\52\3\0\45\52"+
    "\1\0\1\52\2\0\1\52\1\0\3\53\47\0\2\53"+
    "\1\0\51\130\1\55\4\130\51\0\1\55\4\0\4\56"+
    "\1\131\13\56\1\60\35\56\2\61\2\0\47\61\1\0"+
    "\1\61\10\0\1\12\2\0\1\12\4\0\1\12\1\0"+
    "\27\12\20\0\1\132\53\0\1\67\5\0\1\133\46\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\1\134"+
    "\26\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\14\12\1\135\12\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\20\12\1\136\6\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\17\12"+
    "\1\137\7\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\12\12\1\140\14\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\10\12\1\141\16\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\10\12\1\142\16\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\17\12\1\143\7\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\15\12\1\144"+
    "\11\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\1\12\1\145\25\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\5\12\1\146\21\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\14\12"+
    "\1\147\12\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\1\150\26\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\1\151\26\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\22\12\1\152"+
    "\4\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\25\12\1\153\1\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\17\12\1\154\7\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\15\12"+
    "\1\155\1\156\10\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\22\12\1\157\4\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\17\12\1\160"+
    "\7\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\17\12\1\161\7\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\3\12\1\162\23\12\6\0"+
    "\1\163\1\116\2\0\44\163\1\0\1\163\3\0\1\163"+
    "\1\164\1\117\2\56\1\165\13\164\1\166\27\164\1\56"+
    "\1\164\3\56\1\164\1\42\1\117\2\56\1\167\13\42"+
    "\1\121\27\42\5\56\1\42\1\170\1\122\2\61\2\170"+
    "\1\165\11\170\1\171\27\170\1\61\1\170\3\61\1\170"+
    "\1\43\1\122\2\0\44\43\3\61\1\0\1\61\2\37"+
    "\1\116\2\0\6\37\1\172\35\37\5\0\2\37\1\116"+
    "\2\0\27\37\1\173\14\37\5\0\2\37\1\116\2\0"+
    "\37\37\1\174\4\37\5\0\1\37\1\127\3\0\6\127"+
    "\1\0\4\127\1\0\1\127\27\0\1\127\1\0\1\127"+
    "\2\0\1\127\7\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\20\12\1\175\6\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\20\12\1\176\6\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\2\12\1\156\24\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\4\12\1\177\22\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\20\12\1\200"+
    "\6\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\3\12\1\201\23\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\6\12\1\202\20\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\10\12"+
    "\1\203\16\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\14\12\1\156\12\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\4\12\1\204\22\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\21\12\1\156\5\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\11\12\1\156\15\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\17\12\1\156"+
    "\7\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\16\12\1\205\10\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\17\12\1\206\7\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\12\12"+
    "\1\207\14\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\6\12\1\210\20\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\12\12\1\211\14\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\4\12\1\212\22\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\20\12\1\156\6\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\21\12\1\213"+
    "\5\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\21\12\1\214\5\12\6\0\1\164\1\117\2\56"+
    "\1\215\13\164\1\166\27\164\1\56\1\164\3\56\1\164"+
    "\1\170\1\122\2\0\44\170\1\61\1\170\1\61\1\0"+
    "\1\61\1\163\1\37\1\116\2\0\35\37\1\216\6\37"+
    "\5\0\2\37\1\116\2\0\21\37\1\217\22\37\5\0"+
    "\1\37\7\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\20\12\1\220\6\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\21\12\1\221\5\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\2\12"+
    "\1\222\24\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\4\12\1\223\22\12\15\0\1\12\1\224"+
    "\1\0\1\12\4\0\1\12\1\0\27\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\7\12\1\146"+
    "\17\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\26\12\1\225\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\12\12\1\156\14\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\4\12\1\156"+
    "\22\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\2\12\1\226\24\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\4\12\1\227\22\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\4\12"+
    "\1\230\22\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\21\12\1\231\5\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\10\12\1\232\16\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\7\12\1\156\17\12\6\0\1\37\1\116\2\0\21\37"+
    "\1\233\22\37\5\0\1\37\7\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\4\12\1\160\22\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\17\12"+
    "\1\234\7\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\21\12\1\235\5\12\15\0\1\12\2\0"+
    "\1\12\4\0\1\12\1\0\2\12\1\236\3\12\1\237"+
    "\10\12\1\240\7\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\15\12\1\241\11\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\4\12\1\242"+
    "\22\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\21\12\1\242\5\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\10\12\1\243\16\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\2\12"+
    "\1\244\24\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\1\245\26\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\10\12\1\100\16\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\15\12"+
    "\1\246\11\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\1\243\26\12\15\0\1\12\1\63\1\0"+
    "\1\12\4\0\1\12\1\0\15\12\1\247\11\12\15\0"+
    "\1\12\1\63\1\0\1\12\4\0\1\12\1\0\14\12"+
    "\1\250\12\12\15\0\1\12\1\251\1\0\1\12\4\0"+
    "\1\12\1\0\27\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\16\12\1\156\10\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\1\252\26\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\10\12\1\253\16\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\12\12\1\254\14\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\24\12\1\160"+
    "\2\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\21\12\1\244\5\12\15\0\1\12\2\0\1\12"+
    "\4\0\1\12\1\0\1\255\26\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\12\12\1\256\14\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\14\12\1\146\12\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\22\12\1\257\4\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\17\12\1\260"+
    "\7\12\15\0\1\12\1\261\1\0\1\12\4\0\1\12"+
    "\1\0\27\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\13\12\1\262\13\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\17\12\1\263\7\12"+
    "\15\0\1\12\2\0\1\12\4\0\1\12\1\0\6\12"+
    "\1\237\20\12\15\0\1\12\1\63\1\0\1\12\4\0"+
    "\1\12\1\0\14\12\1\160\12\12\15\0\1\12\1\63"+
    "\1\0\1\12\4\0\1\12\1\0\15\12\1\264\11\12"+
    "\15\0\1\12\1\63\1\0\1\12\4\0\1\12\1\0"+
    "\24\12\1\265\2\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\7\12\1\266\17\12\15\0\1\12"+
    "\1\63\1\0\1\12\4\0\1\12\1\0\4\12\1\267"+
    "\22\12\15\0\1\12\1\63\1\0\1\12\4\0\1\12"+
    "\1\0\1\270\26\12\15\0\1\12\1\63\1\0\1\12"+
    "\4\0\1\12\1\0\3\12\1\227\23\12\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7084];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\6\1\1\11\1\1\2\11\15\1\2\11"+
    "\10\1\1\11\1\1\1\11\4\1\1\0\1\11\4\0"+
    "\1\1\1\11\1\0\27\1\2\0\2\1\1\0\5\1"+
    "\1\0\2\1\1\11\70\1\1\0\24\1\1\0\7\1"+
    "\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public D2FlexLexer() {
    this((java.io.Reader)null);
  }

  private StringBuilder blockStringToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public D2FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_STRING_LANG_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 185: break;
            case BLOCK_STRING_BODY_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 186: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 28: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 29: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 30: break;
          case 4:
            { return ID;
            }
          // fall through
          case 31: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 32: break;
          case 6:
            { return INT;
            }
          // fall through
          case 33: break;
          case 7:
            { yybegin(LABEL); return COLON;
            }
          // fall through
          case 34: break;
          case 8:
            { return SEMICOLON;
            }
          // fall through
          case 35: break;
          case 9:
            { return LBRACE;
            }
          // fall through
          case 36: break;
          case 10:
            { return RBRACE;
            }
          // fall through
          case 37: break;
          case 11:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 38: break;
          case 12:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 13:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 40: break;
          case 14:
            { yybegin(BLOCK_STRING_LANG_STATE);
								blockStringToken = new StringBuilder(yytext()).reverse();
								return BLOCK_STRING_OPEN;
            }
          // fall through
          case 41: break;
          case 15:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 42: break;
          case 16:
            { yybegin(BLOCK_STRING_BODY_STATE); return BLOCK_STRING_LANG;
            }
          // fall through
          case 43: break;
          case 17:
            { if (blockStringToken == null) {
											yybegin(YYINITIAL);
											blockStringToken = null;
											return BLOCK_STRING_CLOSE;
									}
									else if (StringUtilRt.endsWith(yytext(), blockStringToken)) {
											// push back to register on next step as a BLOCK_STRING_CLOSE token,
											// (we neeed it to easily implement embededed language, brace matcher and so on)
											yypushback(blockStringToken.length());
											blockStringToken = null;
											return BLOCK_STRING_BODY;
									}
            }
          // fall through
          case 44: break;
          case 18:
            { return STRING;
            }
          // fall through
          case 45: break;
          case 19:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 46: break;
          case 20:
            { return ARROW;
            }
          // fall through
          case 47: break;
          case 21:
            { return REVERSE_ARROW;
            }
          // fall through
          case 48: break;
          case 22:
            { return FLOAT;
            }
          // fall through
          case 49: break;
          case 23:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 50: break;
          case 24:
            { return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 51: break;
          case 25:
            { return TRUE;
            }
          // fall through
          case 52: break;
          case 26:
            { return FALSE;
            }
          // fall through
          case 53: break;
          case 27:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
